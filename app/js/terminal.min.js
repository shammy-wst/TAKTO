class TaktoTerminal{constructor(){this.isOpen=!1,this.lineNumber=1,this.isVisible=!0,this.history=[],this.historyIndex=-1,this.commands={};const t=document.querySelector(".takto-terminal");t&&t.remove(),this.container=document.createElement("div"),this.container.className="takto-terminal",this.container.setAttribute("role","dialog"),this.container.setAttribute("aria-label","TAKTO Terminal"),this.container.style.display="block",this.header=document.createElement("div"),this.header.className="takto-terminal-header",this.title=document.createElement("div"),this.title.className="takto-terminal-title",this.title.textContent="TAKTO Terminal",this.buttonsContainer=document.createElement("div"),this.buttonsContainer.className="takto-terminal-buttons",this.closeBtn=document.createElement("button"),this.closeBtn.className="takto-terminal-btn takto-terminal-close",this.closeBtn.innerHTML="&times;",this.closeBtn.setAttribute("aria-label","Close terminal"),this.closeBtn.addEventListener("click",(()=>this.toggle())),this.buttonsContainer.appendChild(this.closeBtn),this.header.appendChild(this.title),this.header.appendChild(this.buttonsContainer),this.outputArea=document.createElement("div"),this.outputArea.className="takto-terminal-output",this.inputArea=document.createElement("div"),this.inputArea.className="takto-terminal-input-area",this.prompt=document.createElement("span"),this.prompt.className="takto-terminal-prompt",this.prompt.textContent="> ",this.input=document.createElement("input"),this.input.className="takto-terminal-input",this.input.type="text",this.input.setAttribute("spellcheck","false"),this.input.setAttribute("autocomplete","off"),this.input.setAttribute("aria-label","Terminal command input"),this.input.addEventListener("keydown",(t=>this.handleKeyDown(t))),this.inputArea.appendChild(this.prompt),this.inputArea.appendChild(this.input),this.container.appendChild(this.header),this.container.appendChild(this.outputArea),this.container.appendChild(this.inputArea);const e=document.getElementById("main-content");e?e.appendChild(this.container):document.body.appendChild(this.container),this.openBtn=document.createElement("button"),this.openBtn.className="takto-terminal-open-btn",this.openBtn.innerHTML="&gt;_",this.openBtn.setAttribute("aria-label","Open terminal"),this.openBtn.addEventListener("click",(()=>this.toggle()));const n=document.querySelector(".takto-terminal-open-btn");n&&n.remove(),document.body.appendChild(this.openBtn),this.registerDefaultCommands(),this.addTerminalStyles(),this.registerKeyboardShortcuts(),this.focus()}createOpenButton(){this.openBtn=document.createElement("button"),this.openBtn.className="open-terminal-btn",this.openBtn.textContent="Open Terminal",this.openBtn.setAttribute("aria-label","Open terminal"),this.openBtn.addEventListener("click",(()=>this.show())),document.body.appendChild(this.openBtn)}showWelcomeMessage(){this.print("Welcome to TAKTO - Task Manager"),this.print("Type <strong>help</strong> for available commands or press <strong>Ctrl+H</strong>"),this.print(""),this.print("Start by creating a project:"),this.print('  create project "My Project"'),this.print(""),this.print("Then add tasks to it:"),this.print('  create task 1 "My first task"'),this.print("")}registerDefaultCommands(){this.registerCommand("help",{description:"Shows the list of available commands",usage:"help [command]",callback:t=>{if(t.length>0){const e=t[0],n=this.commands[e];n?(this.print(`<strong>${e}</strong>: ${n.description}`),this.print(`Usage: ${n.usage||e}`),n.examples&&(this.print("Examples:"),n.examples.forEach((t=>{this.print(`  ${t}`)})))):this.printError(`Command "${e}" not found.`)}else this.print("Available commands:"),Object.keys(this.commands).sort().forEach((t=>{this.print(`  <strong>${t}</strong>: ${this.commands[t].description}`)})),this.print("\nType <strong>help [command]</strong> for more information about a specific command.")}}),this.registerCommand("clear",{description:"Clears the terminal screen",callback:()=>{this.clear()}}),this.registerCommand("about",{description:"Shows information about TAKTO",callback:()=>{this.print('<span class="terminal-welcome">TAKTO - Task Management System</span>'),this.print("Version: 1.0.0"),this.print("A simple task management system with project organization."),this.print("Use the terminal to manage your projects and tasks."),this.print("Type <strong>help</strong> to see available commands.")}}),this.registerCommand("accessibility",{description:"Shows accessibility options and keyboard shortcuts",callback:()=>{this.print('<span class="terminal-welcome">Accessibility Options</span>'),this.print("TAKTO is designed to be fully accessible via keyboard."),this.print("\nKeyboard shortcuts:"),this.print("  <strong>Ctrl+H</strong>: Show help"),this.print("  <strong>Ctrl+L</strong>: List projects"),this.print("  <strong>Ctrl+T</strong>: List tasks"),this.print("  <strong>Ctrl+C</strong>: Clear terminal"),this.print("  <strong>Ctrl+A</strong>: Show about information"),this.print("  <strong>Tab</strong>: Auto-complete command"),this.print("  <strong>↑/↓</strong>: Navigate command history"),this.print("\nNavigation shortcuts:"),this.print("  <strong>Alt+T</strong>: Switch to Terminal"),this.print("  <strong>Alt+R</strong>: Switch to README"),this.print("  <strong>Alt+F</strong>: Switch to FAQ"),this.print("  <strong>Alt+O</strong>: Switch to Our Team"),this.print("  <strong>Alt+A</strong>: Switch to Accessibility page"),this.print("\nFor more options and visual adaptations, visit the <strong>Accessibility</strong> tab.")}})}registerCommand(t,e){if("function"!=typeof e.callback)throw new Error("Command callback must be a function");this.commands[t]={description:e.description||"No description",usage:e.usage||t,examples:e.examples||[],callback:e.callback}}execute(t){if(!t)return;this.history.push(t),this.historyIndex=this.history.length;const e=t.split(" "),n=e.shift().toLowerCase();if(this.commands&&Object.prototype.hasOwnProperty.call(this.commands,n)&&this.commands[n]&&"function"==typeof this.commands[n].callback)try{this.commands[n].callback(e)}catch(t){this.printError(`Error executing command '${n}': ${t.message}`)}else this.printError(`Command not found: ${n}`);this.input&&(this.input.value="")}handleKeyDown(t){if("Enter"===t.key){const t=this.input.value.trim();t&&this.execute(t)}else if("ArrowUp"===t.key)t.preventDefault(),this.history.length>0&&(this.historyIndex>0?this.historyIndex--:-1===this.historyIndex&&(this.historyIndex=this.history.length-1),this.input.value=this.history[this.historyIndex],setTimeout((()=>{this.input.selectionStart=this.input.selectionEnd=this.input.value.length}),0));else if("ArrowDown"===t.key)t.preventDefault(),this.historyIndex<this.history.length-1?(this.historyIndex++,this.input.value=this.history[this.historyIndex]):this.historyIndex===this.history.length-1&&(this.historyIndex=-1,this.input.value="");else if("Tab"===t.key&&!t.shiftKey){if(!this.input.value.trim())return;t.preventDefault();const e=this.input.value.trim().split(/\s+/)[0].toLowerCase();if(e){const t=Object.keys(this.commands).filter((t=>t.startsWith(e)));1===t.length?this.input.value=t[0]+" ":t.length>1&&(this.printCommandEcho(this.input.value),this.print("<strong>Possible completions:</strong>"),t.forEach((t=>{this.print(`  ${t}`)})))}}}print(t){this.printToTerminal(t)}printError(t){this.printToTerminal(t,"error")}printSuccess(t){this.printToTerminal(t,"success")}printCommandEcho(t){this.printToTerminal(`> ${t}`,"command-echo")}printToTerminal(t,e=""){if(!this.outputArea)return;const n=document.createElement("div");if(n.className="takto-terminal-line"+(e?" "+e:""),n.innerHTML=t,"number"==typeof this.lineNumber&&n.setAttribute("data-line-number",String(this.lineNumber++)),this.outputArea.appendChild(n),this.scrollToBottom(),"error"===e||"success"===e){const e=document.createElement("div");e.className="sr-only",e.setAttribute("role","alert"),e.textContent=t.replace(/<[^>]*>/g,""),this.outputArea.appendChild(e),setTimeout((()=>{e.parentNode&&e.parentNode.removeChild(e)}),1e3)}}clear(){this.outputArea.innerHTML="",this.lineNumber=1}scrollToBottom(){this.outputArea&&(this.outputArea.scrollTop=this.outputArea.scrollHeight)}focus(){this.input.focus()}registerKeyboardShortcuts(){this.container.addEventListener("keydown",(t=>{if(t.ctrlKey&&t.target!==this.input){let e=null;switch(t.key){case"h":e="help";break;case"l":e="ls projects";break;case"t":e="ls tasks";break;case"c":e="clear";break;case"a":e="about"}e&&(t.preventDefault(),this.input.value=e,this.execute(e),this.input.value="")}}));const t=this.commands.help.callback;this.commands.help.callback=e=>{t(e),e.length||(this.print("\nKeyboard shortcuts:"),this.print("  <strong>Ctrl+H</strong>: Show help"),this.print("  <strong>Ctrl+L</strong>: List projects"),this.print("  <strong>Ctrl+T</strong>: List tasks"),this.print("  <strong>Ctrl+C</strong>: Clear terminal"),this.print("  <strong>Ctrl+A</strong>: Show about information"),this.print("  <strong>Tab</strong>: Auto-complete command"),this.print("  <strong>↑/↓</strong>: Navigate command history"))}}show(){this.container.classList.remove("hidden"),this.isVisible=!0,this.focus()}hide(){this.container.classList.add("hidden"),this.isVisible=!1}toggle(){this.isVisible?this.hide():this.show()}init(t){this.dataManager=t,this.registerCommand("ls",{description:"List projects or tasks",usage:"ls [projects|tasks|tasks in <project_id>]",examples:["ls projects","ls tasks","ls tasks in 1"],callback:t=>{if(t.length&&"projects"!==t[0])if("tasks"===t[0])if("in"===t[1]&&t[2]){const e=t[2],n=this.dataManager.getTasksByProjectId(e),i=this.dataManager.getProjectById(e);if(!i)return void this.printError(`Project with ID ${e} not found.`);if(0===n.length)return void this.print(`No tasks found in project "${i.name}". Create one with: create task ${e} "Task name"`);this.print(`Tasks in project "${i.name}":`),n.forEach((t=>{const e=this.getStatusText(t.status);this.print(`  [${t.id}] ${t.name} - ${e}`)}))}else{const t=this.dataManager.getAllTasks();if(0===t.length)return void this.print("No tasks found. Create a project first, then add tasks to it.");this.print("All tasks:"),t.forEach((t=>{const e=this.dataManager.getProjectById(t.projectId),n=this.getStatusText(t.status);this.print(`  [${t.id}] ${t.name} - ${n} (Project: ${e.name})`)}))}else this.printError(`Unknown list type: ${t[0]}`);else{const t=this.dataManager.getAllProjects();if(0===t.length)return void this.print('No projects found. Create one with: create project "Project name"');this.print("Projects:"),t.forEach((t=>{this.print(`  [${t.id}] ${t.name} (${t.tasks.length} tasks)`)}))}}}),this.registerCommand("create",{description:"Create a new project or task",usage:'create [project|task] [project_id (for task)] "Name"',examples:['create project "My new project"','create task 1 "My new task"'],callback:t=>{if(!t.length)return void this.printError("Please specify what to create: project or task");const e=t[0];if("project"===e){const e=this.extractQuotedText(t.slice(1).join(" "));if(!e)return void this.printError('Please provide a project name in quotes: create project "Project name"');const n=this.dataManager.createProject(e);n?this.printSuccess(`Project "${e}" created with ID: ${n.id}`):this.printError("Failed to create project")}else if("task"===e){if(t.length<2)return void this.printError('Please provide a project ID: create task <project_id> "Task name"');const e=t[1],n=this.extractQuotedText(t.slice(2).join(" "));if(!n)return void this.printError('Please provide a task name in quotes: create task <project_id> "Task name"');const i=this.dataManager.getProjectById(e);if(!i)return void this.printError(`Project with ID ${e} not found.`);const s=this.dataManager.createTask(e,n);s?this.printSuccess(`Task "${n}" created with ID: ${s.id} in project "${i.name}"`):this.printError("Failed to create task")}else this.printError(`Unknown creation type: ${e}`)}})}extractQuotedText(t){const e=t.match(/"([^"]*)"/);return e?e[1]:null}getStatusText(t){switch(t){case"todo":return'<span class="status-todo">Todo</span>';case"in-progress":return'<span class="status-in-progress">In Progress</span>';case"done":return'<span class="status-done">Done</span>';default:return t}}close(){this.hide()}createTerminal(){this.header=document.createElement("div"),this.header.className="takto-terminal-header",this.header.setAttribute("role","toolbar"),this.header.setAttribute("aria-label","Terminal controls"),this.title=document.createElement("div"),this.title.className="takto-terminal-title",this.title.textContent="TAKTO Terminal",this.header.appendChild(this.title),this.controls=document.createElement("div"),this.controls.className="takto-terminal-controls",this.closeBtn=document.createElement("button"),this.closeBtn.className="takto-terminal-btn takto-terminal-close",this.closeBtn.innerHTML="&#10005;",this.closeBtn.setAttribute("aria-label","Close terminal"),this.closeBtn.addEventListener("click",(()=>this.close())),this.controls.appendChild(this.closeBtn),this.header.appendChild(this.controls),this.container.insertBefore(this.header,this.container.firstChild)}initializeEventListeners(){this.header.addEventListener("mousedown",(t=>{if(t.target===this.header||t.target===this.title){const e=t.clientX,n=t.clientY,i=this.container.offsetLeft,s=this.container.offsetTop,r=t=>{const r=t.clientX-e,o=t.clientY-n;this.container.style.left=`${i+r}px`,this.container.style.top=`${s+o}px`},o=()=>{document.removeEventListener("mousemove",r),document.removeEventListener("mouseup",o)};document.addEventListener("mousemove",r),document.addEventListener("mouseup",o)}}))}addTerminalPageStyles(){const t=document.createElement("style");t.textContent="\n      .takto-terminal-page {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100vh;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n        background-color: #1e1e1e;\n        color: #f0f0f0;\n        font-family: 'Courier New', monospace;\n        padding: 1rem;\n        box-sizing: border-box;\n      }\n      \n      .takto-terminal-page-header {\n        display: flex;\n        justify-content: space-between;\n        margin-bottom: 1rem;\n      }\n      \n      .takto-terminal-page-title {\n        font-size: 1.5rem;\n        font-weight: bold;\n      }\n      \n      .takto-terminal-page-content {\n        flex: 1;\n        overflow-y: auto;\n        padding-right: 0.5rem;\n      }\n      \n      .takto-terminal-page-footer {\n        display: flex;\n        justify-content: center;\n        margin-top: 1rem;\n      }\n      \n      .takto-terminal-page-button {\n        background-color: #333;\n        color: #f0f0f0;\n        border: none;\n        padding: 0.5rem 1rem;\n        margin: 0 0.5rem;\n        cursor: pointer;\n        border-radius: 3px;\n      }\n      \n      .takto-terminal-page-button:hover {\n        background-color: #444;\n      }\n    ",document.head.appendChild(t)}addTerminalStyles(){const t="takto-terminal-styles";if(!document.getElementById(t)){const e=document.createElement("style");e.id=t,e.textContent="\n        .takto-terminal {\n          background-color: #1e1e1e;\n          color: #f0f0f0;\n          font-family: 'Courier New', monospace;\n          border-radius: 4px;\n          overflow: hidden;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);\n          display: flex;\n          flex-direction: column;\n          height: calc(100vh - 40px);\n          margin: 5px;\n        }\n        \n        .takto-terminal-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          background-color: #333;\n          padding: 5px 10px;\n          border-bottom: 1px solid #444;\n          user-select: none;\n        }\n        \n        .takto-terminal-title {\n          color: #ddd;\n          font-weight: bold;\n        }\n        \n        .takto-terminal-buttons {\n          display: flex;\n          gap: 5px;\n        }\n        \n        .takto-terminal-btn {\n          background: transparent;\n          border: none;\n          color: #ddd;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          cursor: pointer;\n          font-size: 16px;\n          padding: 0;\n        }\n        \n        .takto-terminal-close {\n          background-color: rgba(255, 59, 48, 0.6);\n        }\n        \n        .takto-terminal-close:hover {\n          background-color: rgba(255, 59, 48, 0.8);\n        }\n        \n        .takto-terminal-output {\n          flex: 1;\n          overflow-y: auto;\n          padding: 10px;\n          scrollbar-width: thin;\n          scrollbar-color: #444 #1e1e1e;\n        }\n        \n        .takto-terminal-output::-webkit-scrollbar {\n          width: 8px;\n        }\n        \n        .takto-terminal-output::-webkit-scrollbar-track {\n          background: #1e1e1e;\n        }\n        \n        .takto-terminal-output::-webkit-scrollbar-thumb {\n          background-color: #444;\n          border-radius: 20px;\n          border: 2px solid #1e1e1e;\n        }\n        \n        .takto-terminal-line {\n          margin-bottom: 4px;\n          position: relative;\n          padding-left: 20px;\n          line-height: 1.4;\n        }\n        \n        .takto-terminal-line::before {\n          content: attr(data-line-number);\n          position: absolute;\n          left: 0;\n          color: #666;\n          font-size: 0.8em;\n          top: 2px;\n        }\n        \n        .takto-terminal-input-area {\n          display: flex;\n          padding: 5px 10px;\n          background-color: #252525;\n          border-top: 1px solid #333;\n        }\n        \n        .takto-terminal-prompt {\n          color: #0f0;\n          margin-right: 5px;\n        }\n        \n        .takto-terminal-input {\n          background: transparent;\n          border: none;\n          color: #fff;\n          font-family: inherit;\n          flex: 1;\n          outline: none;\n          font-size: inherit;\n        }\n        \n        .takto-terminal-open-btn {\n          position: fixed;\n          bottom: 20px;\n          right: 20px;\n          background-color: #333;\n          color: #fff;\n          border: none;\n          border-radius: 4px;\n          padding: 8px 12px;\n          font-family: monospace;\n          cursor: pointer;\n          z-index: 1000;\n          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n        }\n        \n        .takto-terminal-open-btn:hover {\n          background-color: #444;\n        }\n        \n        .error {\n          color: #ff6b6b;\n        }\n        \n        .success {\n          color: #51cf66;\n        }\n        \n        .sr-only {\n          position: absolute;\n          width: 1px;\n          height: 1px;\n          padding: 0;\n          margin: -1px;\n          overflow: hidden;\n          clip: rect(0, 0, 0, 0);\n          white-space: nowrap;\n          border-width: 0;\n        }\n      ",document.head.appendChild(e)}this.addTerminalPageStyles()}}window.TaktoTerminal=TaktoTerminal;